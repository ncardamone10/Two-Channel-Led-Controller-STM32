
ledController2Channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d28  08004d28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d28  08004d28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d28  08004d28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08004d3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08004d3c  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad25  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d83  00000000  00000000  0002ad5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002cae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002d650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d8f  00000000  00000000  0002e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000caf8  00000000  00000000  00046e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c4d  00000000  00000000  0005395f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd5ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003000  00000000  00000000  000dd5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cd0 	.word	0x08003cd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003cd0 	.word	0x08003cd0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	0000      	movs	r0, r0
	...

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b0ce      	sub	sp, #312	; 0x138
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fd2f 	bl	80011c8 <HAL_Init>
  //int32_t CH1_DC = 0;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f9c5 	bl	8000af8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 fb79 	bl	8000e64 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000772:	f000 fb59 	bl	8000e28 <_ZL11MX_DMA_Initv>
  MX_TIM1_Init();
 8000776:	f000 fa85 	bl	8000c84 <_ZL12MX_TIM1_Initv>
  MX_ADC1_Init();
 800077a:	f000 fa27 	bl	8000bcc <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  // Start timer 1 for PWM control of boost converters
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800077e:	2100      	movs	r1, #0
 8000780:	48d5      	ldr	r0, [pc, #852]	; (8000ad8 <main+0x378>)
 8000782:	f002 fcf9 	bl	8003178 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000786:	2104      	movs	r1, #4
 8000788:	48d3      	ldr	r0, [pc, #844]	; (8000ad8 <main+0x378>)
 800078a:	f002 fcf5 	bl	8003178 <HAL_TIM_PWM_Start>

  // Start ADC to read 2 pots to control brightness and CCT of light engine
  uint32_t adcValues[2] = {0,0};
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  HAL_ADCEx_Calibration_Start(&hadc1);
 800079a:	48d0      	ldr	r0, [pc, #832]	; (8000adc <main+0x37c>)
 800079c:	f001 f966 	bl	8001a6c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adcValues, 2);
 80007a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007a4:	2202      	movs	r2, #2
 80007a6:	4619      	mov	r1, r3
 80007a8:	48cc      	ldr	r0, [pc, #816]	; (8000adc <main+0x37c>)
 80007aa:	f000 fe6b 	bl	8001484 <HAL_ADC_Start_DMA>

  // Low Pass Filter for Flicker Removal
#define LPF_FILTER_LENGTH 32
  uint32_t channelOnePwmFilter[LPF_FILTER_LENGTH] = {0};
 80007ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007b2:	2280      	movs	r2, #128	; 0x80
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fa82 	bl	8003cc0 <memset>
  uint32_t channelTwoPwmFilter[LPF_FILTER_LENGTH] = {0};
 80007bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80007c0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80007c4:	4618      	mov	r0, r3
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	461a      	mov	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f003 fa78 	bl	8003cc0 <memset>
  uint32_t channelOnePwmPtr = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  uint32_t channelTwoPwmPtr = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

  // Switch button to turn system on and off
  uint32_t btnState = 0x01;
 80007dc:	2301      	movs	r3, #1
 80007de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
#define DEBOUNCE_COUNT 300
  uint32_t debounce = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  uint32_t debounceCount = DEBOUNCE_COUNT;
 80007e8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80007ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
	  // Check for btn press
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET && debounce == 0){
 80007f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f4:	48ba      	ldr	r0, [pc, #744]	; (8000ae0 <main+0x380>)
 80007f6:	f001 fe67 	bl	80024c8 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d105      	bne.n	800080c <main+0xac>
 8000800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <main+0xac>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <main+0xae>
 800080c:	2300      	movs	r3, #0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d012      	beq.n	8000838 <main+0xd8>
		  btnState ^= 0x01;
 8000812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000816:	f083 0301 	eor.w	r3, r3, #1
 800081a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		  debounce = 0x01;
 800081e:	2301      	movs	r3, #1
 8000820:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		  debounceCount--;
 8000824:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000828:	3b01      	subs	r3, #1
 800082a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800082e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000832:	48ac      	ldr	r0, [pc, #688]	; (8000ae4 <main+0x384>)
 8000834:	f001 fe77 	bl	8002526 <HAL_GPIO_TogglePin>
	  }
	  // Debounce btn press
	  if (debounceCount < DEBOUNCE_COUNT){
 8000838:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800083c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000840:	d204      	bcs.n	800084c <main+0xec>
		  debounceCount--;
 8000842:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000846:	3b01      	subs	r3, #1
 8000848:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  }
	  if (debounceCount == 0){
 800084c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000850:	2b00      	cmp	r3, #0
 8000852:	d106      	bne.n	8000862 <main+0x102>
		  debounceCount = DEBOUNCE_COUNT;
 8000854:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000858:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  debounce = 0x00;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  }

	  // Check system state
	  if (btnState == 0x01){
 8000862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000866:	2b01      	cmp	r3, #1
 8000868:	f040 80cf 	bne.w	8000a0a <main+0x2aa>
		  // System is on
		  // Read from ADC
		  uint32_t avgIndex = ((4095 - adcValues[0]) * 511) / 4095;
 800086c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000870:	461a      	mov	r2, r3
 8000872:	025b      	lsls	r3, r3, #9
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	f503 13ff 	add.w	r3, r3, #2088960	; 0x1fe000
 800087a:	f603 6301 	addw	r3, r3, #3585	; 0xe01
 800087e:	4a9a      	ldr	r2, [pc, #616]	; (8000ae8 <main+0x388>)
 8000880:	fba2 1203 	umull	r1, r2, r2, r3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	085b      	lsrs	r3, r3, #1
 8000888:	4413      	add	r3, r2
 800088a:	0adb      	lsrs	r3, r3, #11
 800088c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		  int32_t indexSpread = ((4095 - adcValues[1]) * 511) / 4095 - 512/2;
 8000890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000894:	461a      	mov	r2, r3
 8000896:	025b      	lsls	r3, r3, #9
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	f503 13ff 	add.w	r3, r3, #2088960	; 0x1fe000
 800089e:	f603 6301 	addw	r3, r3, #3585	; 0xe01
 80008a2:	4a91      	ldr	r2, [pc, #580]	; (8000ae8 <main+0x388>)
 80008a4:	fba2 1203 	umull	r1, r2, r2, r3
 80008a8:	1a9b      	subs	r3, r3, r2
 80008aa:	085b      	lsrs	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	0adb      	lsrs	r3, r3, #11
 80008b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		  // Compute CCT mapping and get indices for ln() LUT
		  int32_t idx1 = avgIndex + indexSpread;
 80008b8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80008bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80008c0:	4413      	add	r3, r2
 80008c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		  int32_t idx2 = avgIndex - indexSpread;
 80008c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008ca:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

		  // Bound Check
		  if(idx1 < 0){
 80008d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008d8:	2b00      	cmp	r3, #0
 80008da:	da08      	bge.n	80008ee <main+0x18e>
			  idx1 = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80008e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e6:	487f      	ldr	r0, [pc, #508]	; (8000ae4 <main+0x384>)
 80008e8:	f001 fe1d 	bl	8002526 <HAL_GPIO_TogglePin>
 80008ec:	e00d      	b.n	800090a <main+0x1aa>
		  } else if(idx1 > 511){
 80008ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008f6:	db08      	blt.n	800090a <main+0x1aa>
			  idx1 = 511;
 80008f8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80008fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000904:	4877      	ldr	r0, [pc, #476]	; (8000ae4 <main+0x384>)
 8000906:	f001 fe0e 	bl	8002526 <HAL_GPIO_TogglePin>
		  }
		  if(idx2 < 0){
 800090a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800090e:	2b00      	cmp	r3, #0
 8000910:	da08      	bge.n	8000924 <main+0x1c4>
			  idx2 = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091c:	4871      	ldr	r0, [pc, #452]	; (8000ae4 <main+0x384>)
 800091e:	f001 fe02 	bl	8002526 <HAL_GPIO_TogglePin>
 8000922:	e00d      	b.n	8000940 <main+0x1e0>
		  } else if(idx2 > 511){
 8000924:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800092c:	db08      	blt.n	8000940 <main+0x1e0>
			  idx2 = 511;
 800092e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000932:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093a:	486a      	ldr	r0, [pc, #424]	; (8000ae4 <main+0x384>)
 800093c:	f001 fdf3 	bl	8002526 <HAL_GPIO_TogglePin>
		  }

		  // Update PWM Filter Bank
		  channelTwoPwmFilter[channelTwoPwmPtr++] = (uint32_t)(0.25*CLOCK_PERIOD*y[idx2]*spreadRollOff[avgIndex]);
 8000940:	4a6a      	ldr	r2, [pc, #424]	; (8000aec <main+0x38c>)
 8000942:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe8e 	bl	800066c <__aeabi_f2d>
 8000950:	a35f      	add	r3, pc, #380	; (adr r3, 8000ad0 <main+0x370>)
 8000952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000956:	f7ff fbfb 	bl	8000150 <__aeabi_dmul>
 800095a:	4602      	mov	r2, r0
 800095c:	460b      	mov	r3, r1
 800095e:	4614      	mov	r4, r2
 8000960:	461d      	mov	r5, r3
 8000962:	4a63      	ldr	r2, [pc, #396]	; (8000af0 <main+0x390>)
 8000964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe7d 	bl	800066c <__aeabi_f2d>
 8000972:	4602      	mov	r2, r0
 8000974:	460b      	mov	r3, r1
 8000976:	4620      	mov	r0, r4
 8000978:	4629      	mov	r1, r5
 800097a:	f7ff fbe9 	bl	8000150 <__aeabi_dmul>
 800097e:	4602      	mov	r2, r0
 8000980:	460b      	mov	r3, r1
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
 800098a:	1c63      	adds	r3, r4, #1
 800098c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000990:	f7ff fec4 	bl	800071c <__aeabi_d2uiz>
 8000994:	4602      	mov	r2, r0
 8000996:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800099a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800099e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  channelOnePwmFilter[channelOnePwmPtr++] = CLOCK_PERIOD - (uint32_t)(0.25*CLOCK_PERIOD*y[idx1]*spreadRollOff[avgIndex]);
 80009a2:	4a52      	ldr	r2, [pc, #328]	; (8000aec <main+0x38c>)
 80009a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe5d 	bl	800066c <__aeabi_f2d>
 80009b2:	a347      	add	r3, pc, #284	; (adr r3, 8000ad0 <main+0x370>)
 80009b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b8:	f7ff fbca 	bl	8000150 <__aeabi_dmul>
 80009bc:	4602      	mov	r2, r0
 80009be:	460b      	mov	r3, r1
 80009c0:	4614      	mov	r4, r2
 80009c2:	461d      	mov	r5, r3
 80009c4:	4a4a      	ldr	r2, [pc, #296]	; (8000af0 <main+0x390>)
 80009c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe4c 	bl	800066c <__aeabi_f2d>
 80009d4:	4602      	mov	r2, r0
 80009d6:	460b      	mov	r3, r1
 80009d8:	4620      	mov	r0, r4
 80009da:	4629      	mov	r1, r5
 80009dc:	f7ff fbb8 	bl	8000150 <__aeabi_dmul>
 80009e0:	4602      	mov	r2, r0
 80009e2:	460b      	mov	r3, r1
 80009e4:	4610      	mov	r0, r2
 80009e6:	4619      	mov	r1, r3
 80009e8:	f7ff fe98 	bl	800071c <__aeabi_d2uiz>
 80009ec:	4601      	mov	r1, r0
 80009ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80009f8:	f5c1 6296 	rsb	r2, r1, #1200	; 0x4b0
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000a02:	443b      	add	r3, r7
 8000a04:	f843 2cb8 	str.w	r2, [r3, #-184]
 8000a08:	e018      	b.n	8000a3c <main+0x2dc>
	  } else {
		  // System is off
		  channelTwoPwmFilter[channelTwoPwmPtr++] = 0;
 8000a0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8000a14:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000a18:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  channelOnePwmFilter[channelOnePwmPtr++] = CLOCK_PERIOD - 0;
 8000a22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000a32:	443b      	add	r3, r7
 8000a34:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000a38:	f843 2cb8 	str.w	r2, [r3, #-184]
	  }

	  // Bounds check the array indices
	  if(channelOnePwmPtr >= LPF_FILTER_LENGTH){
 8000a3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a40:	2b1f      	cmp	r3, #31
 8000a42:	d902      	bls.n	8000a4a <main+0x2ea>
		  channelOnePwmPtr = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  }
	  if(channelTwoPwmPtr >= LPF_FILTER_LENGTH){
 8000a4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000a4e:	2b1f      	cmp	r3, #31
 8000a50:	d902      	bls.n	8000a58 <main+0x2f8>
	  		  channelTwoPwmPtr = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  }

	  // Temp variables to hold the avgs
	  uint32_t channelOneAvg = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  uint32_t channelTwoAvg = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	  // Compute moving avg of array
	  for(uint32_t k = 0; k < LPF_FILTER_LENGTH; k++){
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000a6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a6e:	2b1f      	cmp	r3, #31
 8000a70:	d81f      	bhi.n	8000ab2 <main+0x352>
		  channelOneAvg += channelOnePwmFilter[k];
 8000a72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8000a82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000a86:	4413      	add	r3, r2
 8000a88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		  channelTwoAvg += channelTwoPwmFilter[k];
 8000a8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a90:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000a94:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000aa0:	4413      	add	r3, r2
 8000aa2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  for(uint32_t k = 0; k < LPF_FILTER_LENGTH; k++){
 8000aa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000aaa:	3301      	adds	r3, #1
 8000aac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000ab0:	e7db      	b.n	8000a6a <main+0x30a>
	  }

	  // Set PWM in registers
	  TIM1->CCR1 = channelOneAvg / LPF_FILTER_LENGTH;
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <main+0x394>)
 8000ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ab8:	095b      	lsrs	r3, r3, #5
 8000aba:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1->CCR2 = channelTwoAvg / LPF_FILTER_LENGTH;
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <main+0x394>)
 8000abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	6393      	str	r3, [r2, #56]	; 0x38


	  // Just some delay because I feel like it
	  HAL_Delay(1);
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f000 fbe0 	bl	800128c <HAL_Delay>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000acc:	e690      	b.n	80007f0 <main+0x90>
 8000ace:	bf00      	nop
 8000ad0:	00000000 	.word	0x00000000
 8000ad4:	4072c000 	.word	0x4072c000
 8000ad8:	2000009c 	.word	0x2000009c
 8000adc:	20000028 	.word	0x20000028
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	00100101 	.word	0x00100101
 8000aec:	08003ce8 	.word	0x08003ce8
 8000af0:	080044e8 	.word	0x080044e8
 8000af4:	40012c00 	.word	0x40012c00

08000af8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b02:	2228      	movs	r2, #40	; 0x28
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 f8da 	bl	8003cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b36:	2301      	movs	r3, #1
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fd02 	bl	8002558 <HAL_RCC_OscConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000b64:	f000 f9f0 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	230f      	movs	r3, #15
 8000b6a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b78:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2102      	movs	r1, #2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 ff69 	bl	8002a5c <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf14      	ite	ne
 8000b90:	2301      	movne	r3, #1
 8000b92:	2300      	moveq	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000b9a:	f000 f9d5 	bl	8000f48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000ba2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 f8d0 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8000bc0:	f000 f9c2 	bl	8000f48 <Error_Handler>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3750      	adds	r7, #80	; 0x50
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bdc:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000bde:	4a28      	ldr	r2, [pc, #160]	; (8000c80 <_ZL12MX_ADC1_Initv+0xb4>)
 8000be0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000bf8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000c0c:	f000 fb62 	bl	80012d4 <HAL_ADC_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bf14      	ite	ne
 8000c16:	2301      	movne	r3, #1
 8000c18:	2300      	moveq	r3, #0
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8000c20:	f000 f992 	bl	8000f48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000c36:	f000 fd1f 	bl	8001678 <HAL_ADC_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf14      	ite	ne
 8000c40:	2301      	movne	r3, #1
 8000c42:	2300      	moveq	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8000c4a:	f000 f97d 	bl	8000f48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <_ZL12MX_ADC1_Initv+0xb0>)
 8000c5c:	f000 fd0c 	bl	8001678 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8000c70:	f000 f96a 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000028 	.word	0x20000028
 8000c80:	40012400 	.word	0x40012400

08000c84 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b096      	sub	sp, #88	; 0x58
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
 8000cb2:	615a      	str	r2, [r3, #20]
 8000cb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2220      	movs	r2, #32
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 ffff 	bl	8003cc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc2:	4b57      	ldr	r3, [pc, #348]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000cc4:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <_ZL12MX_TIM1_Initv+0x1a0>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cc8:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000cce:	4b54      	ldr	r3, [pc, #336]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = CLOCK_PERIOD;
 8000cd4:	4b52      	ldr	r3, [pc, #328]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000cd6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000cda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce2:	4b4f      	ldr	r3, [pc, #316]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cee:	484c      	ldr	r0, [pc, #304]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000cf0:	f002 f99a 	bl	8003028 <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bf14      	ite	ne
 8000cfa:	2301      	movne	r3, #1
 8000cfc:	2300      	moveq	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8000d04:	f000 f920 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d12:	4619      	mov	r1, r3
 8000d14:	4842      	ldr	r0, [pc, #264]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000d16:	f002 fb93 	bl	8003440 <HAL_TIM_ConfigClockSource>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bf14      	ite	ne
 8000d20:	2301      	movne	r3, #1
 8000d22:	2300      	moveq	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8000d2a:	f000 f90d 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d2e:	483c      	ldr	r0, [pc, #240]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000d30:	f002 f9c9 	bl	80030c6 <HAL_TIM_PWM_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bf14      	ite	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	2300      	moveq	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8000d44:	f000 f900 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d54:	4619      	mov	r1, r3
 8000d56:	4832      	ldr	r0, [pc, #200]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000d58:	f002 fede 	bl	8003b18 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf14      	ite	ne
 8000d62:	2301      	movne	r3, #1
 8000d64:	2300      	moveq	r3, #0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8000d6c:	f000 f8ec 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d70:	2360      	movs	r3, #96	; 0x60
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4822      	ldr	r0, [pc, #136]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000d96:	f002 fa91 	bl	80032bc <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	bf14      	ite	ne
 8000da0:	2301      	movne	r3, #1
 8000da2:	2300      	moveq	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8000daa:	f000 f8cd 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	2204      	movs	r2, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4819      	ldr	r0, [pc, #100]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000dbc:	f002 fa7e 	bl	80032bc <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	bf14      	ite	ne
 8000dc6:	2301      	movne	r3, #1
 8000dc8:	2300      	moveq	r3, #0
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <_ZL12MX_TIM1_Initv+0x150>
  {
    Error_Handler();
 8000dd0:	f000 f8ba 	bl	8000f48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000df8:	f002 feec 	bl	8003bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf14      	ite	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	2300      	moveq	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <_ZL12MX_TIM1_Initv+0x18c>
  {
    Error_Handler();
 8000e0c:	f000 f89c 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <_ZL12MX_TIM1_Initv+0x19c>)
 8000e12:	f000 f947 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000e16:	bf00      	nop
 8000e18:	3758      	adds	r7, #88	; 0x58
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000009c 	.word	0x2000009c
 8000e24:	40012c00 	.word	0x40012c00

08000e28 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <_ZL11MX_DMA_Initv+0x38>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <_ZL11MX_DMA_Initv+0x38>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6153      	str	r3, [r2, #20]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <_ZL11MX_DMA_Initv+0x38>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200b      	movs	r0, #11
 8000e4c:	f000 ff93 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e50:	200b      	movs	r0, #11
 8000e52:	f000 ffac 	bl	8001dae <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a2e      	ldr	r2, [pc, #184]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e90:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a28      	ldr	r2, [pc, #160]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0320 	and.w	r3, r3, #32
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <_ZL12MX_GPIO_Initv+0xd4>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <_ZL12MX_GPIO_Initv+0xd8>)
 8000ee0:	f001 fb09 	bl	80024f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4619      	mov	r1, r3
 8000efc:	480f      	ldr	r0, [pc, #60]	; (8000f3c <_ZL12MX_GPIO_Initv+0xd8>)
 8000efe:	f001 f95f 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f02:	2302      	movs	r3, #2
 8000f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <_ZL12MX_GPIO_Initv+0xdc>)
 8000f12:	f001 f955 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <_ZL12MX_GPIO_Initv+0xe0>)
 8000f2c:	f001 f948 	bl	80021c0 <HAL_GPIO_Init>

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	40010800 	.word	0x40010800
 8000f44:	40010c00 	.word	0x40010c00

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_MspInit+0x40>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_MspInit+0x40>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6193      	str	r3, [r2, #24]
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_MspInit+0x40>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_MspInit+0x40>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_MspInit+0x40>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_MspInit+0x40>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000

08000f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a28      	ldr	r2, [pc, #160]	; (8001054 <HAL_ADC_MspInit+0xbc>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d149      	bne.n	800104c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_ADC_MspInit+0xc0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a26      	ldr	r2, [pc, #152]	; (8001058 <HAL_ADC_MspInit+0xc0>)
 8000fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_ADC_MspInit+0xc0>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_ADC_MspInit+0xc0>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a20      	ldr	r2, [pc, #128]	; (8001058 <HAL_ADC_MspInit+0xc0>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_ADC_MspInit+0xc0>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000fe8:	2306      	movs	r3, #6
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fec:	2303      	movs	r3, #3
 8000fee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4819      	ldr	r0, [pc, #100]	; (800105c <HAL_ADC_MspInit+0xc4>)
 8000ff8:	f001 f8e2 	bl	80021c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_ADC_MspInit+0xcc>)
 8001000:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 8001016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 800101e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001022:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 8001026:	2220      	movs	r2, #32
 8001028:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 8001032:	f000 fed7 	bl	8001de4 <HAL_DMA_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800103c:	f7ff ff84 	bl	8000f48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 8001044:	621a      	str	r2, [r3, #32]
 8001046:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_ADC_MspInit+0xc8>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40012400 	.word	0x40012400
 8001058:	40021000 	.word	0x40021000
 800105c:	40010800 	.word	0x40010800
 8001060:	20000058 	.word	0x20000058
 8001064:	40020008 	.word	0x40020008

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0x34>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10b      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_TIM_Base_MspInit+0x38>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_TIM_Base_MspInit+0x38>)
 8001080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_TIM_Base_MspInit+0x38>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40012c00 	.word	0x40012c00
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_TIM_MspPostInit+0x5c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d118      	bne.n	80010f6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_TIM_MspPostInit+0x60>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_TIM_MspPostInit+0x60>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_TIM_MspPostInit+0x60>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <HAL_TIM_MspPostInit+0x64>)
 80010f2:	f001 f865 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40012c00 	.word	0x40012c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40010800 	.word	0x40010800

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001152:	f000 f87f 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <DMA1_Channel1_IRQHandler+0x10>)
 8001162:	f000 fef9 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000058 	.word	0x20000058

08001170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff fff8 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001182:	490c      	ldr	r1, [pc, #48]	; (80011b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001184:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001198:	4c09      	ldr	r4, [pc, #36]	; (80011c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f002 fd67 	bl	8003c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff fad9 	bl	8000760 <main>
  bx lr
 80011ae:	4770      	bx	lr
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b8:	08004d30 	.word	0x08004d30
  ldr r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011c0:	200000e8 	.word	0x200000e8

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x28>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 fdc1 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	200f      	movs	r0, #15
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff feb6 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fdd9 	bl	8001dca <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 fda1 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x1c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x20>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a03      	ldr	r2, [pc, #12]	; (8001274 <HAL_IncTick+0x20>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000008 	.word	0x20000008
 8001274:	200000e4 	.word	0x200000e4

08001278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <HAL_GetTick+0x10>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	200000e4 	.word	0x200000e4

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff fff0 	bl	8001278 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffe0 	bl	8001278 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008

080012d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0be      	b.n	8001474 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fe40 	bl	8000f98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 faff 	bl	800191c <ADC_ConversionStop_Disable>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 8099 	bne.w	8001462 <HAL_ADC_Init+0x18e>
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f040 8095 	bne.w	8001462 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001340:	f023 0302 	bic.w	r3, r3, #2
 8001344:	f043 0202 	orr.w	r2, r3, #2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001354:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7b1b      	ldrb	r3, [r3, #12]
 800135a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800135c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	4313      	orrs	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800136c:	d003      	beq.n	8001376 <HAL_ADC_Init+0xa2>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d102      	bne.n	800137c <HAL_ADC_Init+0xa8>
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137a:	e000      	b.n	800137e <HAL_ADC_Init+0xaa>
 800137c:	2300      	movs	r3, #0
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7d1b      	ldrb	r3, [r3, #20]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d119      	bne.n	80013c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7b1b      	ldrb	r3, [r3, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d109      	bne.n	80013a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	3b01      	subs	r3, #1
 800139a:	035a      	lsls	r2, r3, #13
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	e00b      	b.n	80013c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f043 0220 	orr.w	r2, r3, #32
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_ADC_Init+0x1a8>)
 80013dc:	4013      	ands	r3, r2
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013f0:	d003      	beq.n	80013fa <HAL_ADC_Init+0x126>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d104      	bne.n	8001404 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	3b01      	subs	r3, #1
 8001400:	051b      	lsls	r3, r3, #20
 8001402:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	430a      	orrs	r2, r1
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_ADC_Init+0x1ac>)
 8001420:	4013      	ands	r3, r2
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	429a      	cmp	r2, r3
 8001426:	d10b      	bne.n	8001440 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800143e:	e018      	b.n	8001472 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	f023 0312 	bic.w	r3, r3, #18
 8001448:	f043 0210 	orr.w	r2, r3, #16
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001460:	e007      	b.n	8001472 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f043 0210 	orr.w	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001472:	7dfb      	ldrb	r3, [r7, #23]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	ffe1f7fd 	.word	0xffe1f7fd
 8001480:	ff1f0efe 	.word	0xff1f0efe

08001484 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a64      	ldr	r2, [pc, #400]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d004      	beq.n	80014a8 <HAL_ADC_Start_DMA+0x24>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a63      	ldr	r2, [pc, #396]	; (8001630 <HAL_ADC_Start_DMA+0x1ac>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_Start_DMA+0x32>
 80014a8:	4b60      	ldr	r3, [pc, #384]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f040 80b3 	bne.w	800161c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_Start_DMA+0x40>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e0ae      	b.n	8001622 <HAL_ADC_Start_DMA+0x19e>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f9cb 	bl	8001868 <ADC_Enable>
 80014d2:	4603      	mov	r3, r0
 80014d4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 809a 	bne.w	8001612 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_ADC_Start_DMA+0x1ac>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d105      	bne.n	8001508 <HAL_ADC_Start_DMA+0x84>
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d115      	bne.n	8001534 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	2b00      	cmp	r3, #0
 8001520:	d026      	beq.n	8001570 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800152a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001532:	e01d      	b.n	8001570 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a39      	ldr	r2, [pc, #228]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d004      	beq.n	8001554 <HAL_ADC_Start_DMA+0xd0>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a38      	ldr	r2, [pc, #224]	; (8001630 <HAL_ADC_Start_DMA+0x1ac>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d10d      	bne.n	8001570 <HAL_ADC_Start_DMA+0xec>
 8001554:	4b35      	ldr	r3, [pc, #212]	; (800162c <HAL_ADC_Start_DMA+0x1a8>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001568:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	f023 0206 	bic.w	r2, r3, #6
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
 8001588:	e002      	b.n	8001590 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a25      	ldr	r2, [pc, #148]	; (8001634 <HAL_ADC_Start_DMA+0x1b0>)
 800159e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_ADC_Start_DMA+0x1b4>)
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_ADC_Start_DMA+0x1b8>)
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f06f 0202 	mvn.w	r2, #2
 80015b8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a18      	ldr	r0, [r3, #32]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	334c      	adds	r3, #76	; 0x4c
 80015d4:	4619      	mov	r1, r3
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f000 fc5d 	bl	8001e98 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ec:	d108      	bne.n	8001600 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015fc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015fe:	e00f      	b.n	8001620 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800160e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001610:	e006      	b.n	8001620 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800161a:	e001      	b.n	8001620 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001620:	7dfb      	ldrb	r3, [r7, #23]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40012400 	.word	0x40012400
 8001630:	40012800 	.word	0x40012800
 8001634:	0800199f 	.word	0x0800199f
 8001638:	08001a1b 	.word	0x08001a1b
 800163c:	08001a37 	.word	0x08001a37

08001640 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x20>
 8001694:	2302      	movs	r3, #2
 8001696:	e0dc      	b.n	8001852 <HAL_ADC_ConfigChannel+0x1da>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d81c      	bhi.n	80016e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b05      	subs	r3, #5
 80016ba:	221f      	movs	r2, #31
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4019      	ands	r1, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	3b05      	subs	r3, #5
 80016d4:	fa00 f203 	lsl.w	r2, r0, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	635a      	str	r2, [r3, #52]	; 0x34
 80016e0:	e03c      	b.n	800175c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d81c      	bhi.n	8001724 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b23      	subs	r3, #35	; 0x23
 80016fc:	221f      	movs	r2, #31
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	4019      	ands	r1, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b23      	subs	r3, #35	; 0x23
 8001716:	fa00 f203 	lsl.w	r2, r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
 8001722:	e01b      	b.n	800175c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b41      	subs	r3, #65	; 0x41
 8001736:	221f      	movs	r2, #31
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b41      	subs	r3, #65	; 0x41
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b09      	cmp	r3, #9
 8001762:	d91c      	bls.n	800179e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68d9      	ldr	r1, [r3, #12]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	3b1e      	subs	r3, #30
 8001776:	2207      	movs	r2, #7
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	4019      	ands	r1, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6898      	ldr	r0, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	3b1e      	subs	r3, #30
 8001790:	fa00 f203 	lsl.w	r2, r0, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	e019      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6919      	ldr	r1, [r3, #16]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	2207      	movs	r2, #7
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4019      	ands	r1, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6898      	ldr	r0, [r3, #8]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d003      	beq.n	80017e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017de:	2b11      	cmp	r3, #17
 80017e0:	d132      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_ADC_ConfigChannel+0x1e4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d125      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d126      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001808:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d11a      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_ADC_ConfigChannel+0x1e8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <HAL_ADC_ConfigChannel+0x1ec>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9a      	lsrs	r2, r3, #18
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001828:	e002      	b.n	8001830 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3b01      	subs	r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f9      	bne.n	800182a <HAL_ADC_ConfigChannel+0x1b2>
 8001836:	e007      	b.n	8001848 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	f043 0220 	orr.w	r2, r3, #32
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40012400 	.word	0x40012400
 8001860:	20000000 	.word	0x20000000
 8001864:	431bde83 	.word	0x431bde83

08001868 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d040      	beq.n	8001908 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <ADC_Enable+0xac>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <ADC_Enable+0xb0>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	0c9b      	lsrs	r3, r3, #18
 80018a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018a4:	e002      	b.n	80018ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018b2:	f7ff fce1 	bl	8001278 <HAL_GetTick>
 80018b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018b8:	e01f      	b.n	80018fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018ba:	f7ff fcdd 	bl	8001278 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d918      	bls.n	80018fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d011      	beq.n	80018fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e007      	b.n	800190a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d1d8      	bne.n	80018ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000000 	.word	0x20000000
 8001918:	431bde83 	.word	0x431bde83

0800191c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d12e      	bne.n	8001994 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0201 	bic.w	r2, r2, #1
 8001944:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001946:	f7ff fc97 	bl	8001278 <HAL_GetTick>
 800194a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800194c:	e01b      	b.n	8001986 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800194e:	f7ff fc93 	bl	8001278 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d914      	bls.n	8001986 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10d      	bne.n	8001986 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	f043 0210 	orr.w	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e007      	b.n	8001996 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d0dc      	beq.n	800194e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d127      	bne.n	8001a08 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019d2:	d115      	bne.n	8001a00 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff fe1d 	bl	8001640 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a06:	e004      	b.n	8001a12 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff fe12 	bl	8001652 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f7ff fe01 	bl	8001664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_ADCEx_Calibration_Start+0x1e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e097      	b.n	8001bba <HAL_ADCEx_Calibration_Start+0x14e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff42 	bl	800191c <ADC_ConversionStop_Disable>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fee3 	bl	8001868 <ADC_Enable>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 8081 	bne.w	8001bb0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ab6:	f023 0302 	bic.w	r3, r3, #2
 8001aba:	f043 0202 	orr.w	r2, r3, #2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ac2:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <HAL_ADCEx_Calibration_Start+0x158>)
 8001ac4:	681c      	ldr	r4, [r3, #0]
 8001ac6:	2002      	movs	r0, #2
 8001ac8:	f001 f9f8 	bl	8002ebc <HAL_RCCEx_GetPeriphCLKFreq>
 8001acc:	4603      	mov	r3, r0
 8001ace:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001ad2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001ad4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001ad6:	e002      	b.n	8001ade <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f9      	bne.n	8001ad8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0208 	orr.w	r2, r2, #8
 8001af2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001af4:	f7ff fbc0 	bl	8001278 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001afa:	e01b      	b.n	8001b34 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001afc:	f7ff fbbc 	bl	8001278 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b0a      	cmp	r3, #10
 8001b08:	d914      	bls.n	8001b34 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00d      	beq.n	8001b34 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f023 0312 	bic.w	r3, r3, #18
 8001b20:	f043 0210 	orr.w	r2, r3, #16
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e042      	b.n	8001bba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1dc      	bne.n	8001afc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0204 	orr.w	r2, r2, #4
 8001b50:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b52:	f7ff fb91 	bl	8001278 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b58:	e01b      	b.n	8001b92 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b5a:	f7ff fb8d 	bl	8001278 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b0a      	cmp	r3, #10
 8001b66:	d914      	bls.n	8001b92 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	f023 0312 	bic.w	r3, r3, #18
 8001b7e:	f043 0210 	orr.w	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e013      	b.n	8001bba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1dc      	bne.n	8001b5a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f023 0303 	bic.w	r3, r3, #3
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4906      	ldr	r1, [pc, #24]	; (8001c60 <__NVIC_EnableIRQ+0x34>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff90 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff2d 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff42 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff90 	bl	8001cb8 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5f 	bl	8001c64 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff35 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa2 	bl	8001d1c <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e043      	b.n	8001e82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_DMA_Init+0xa8>)
 8001e02:	4413      	add	r3, r2
 8001e04:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_DMA_Init+0xac>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	009a      	lsls	r2, r3, #2
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_DMA_Init+0xb0>)
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	bffdfff8 	.word	0xbffdfff8
 8001e90:	cccccccd 	.word	0xcccccccd
 8001e94:	40020000 	.word	0x40020000

08001e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_DMA_Start_IT+0x20>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e04b      	b.n	8001f50 <HAL_DMA_Start_IT+0xb8>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d13a      	bne.n	8001f42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f937 	bl	8002164 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d008      	beq.n	8001f10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 020e 	orr.w	r2, r2, #14
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e00f      	b.n	8001f30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0204 	bic.w	r2, r2, #4
 8001f1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 020a 	orr.w	r2, r2, #10
 8001f2e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e005      	b.n	8001f4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2204      	movs	r2, #4
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d04f      	beq.n	8002020 <HAL_DMA_IRQHandler+0xc8>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d04a      	beq.n	8002020 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a66      	ldr	r2, [pc, #408]	; (8002148 <HAL_DMA_IRQHandler+0x1f0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d029      	beq.n	8002006 <HAL_DMA_IRQHandler+0xae>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a65      	ldr	r2, [pc, #404]	; (800214c <HAL_DMA_IRQHandler+0x1f4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d022      	beq.n	8002002 <HAL_DMA_IRQHandler+0xaa>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a63      	ldr	r2, [pc, #396]	; (8002150 <HAL_DMA_IRQHandler+0x1f8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01a      	beq.n	8001ffc <HAL_DMA_IRQHandler+0xa4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a62      	ldr	r2, [pc, #392]	; (8002154 <HAL_DMA_IRQHandler+0x1fc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d012      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x9e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a60      	ldr	r2, [pc, #384]	; (8002158 <HAL_DMA_IRQHandler+0x200>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x98>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a5f      	ldr	r2, [pc, #380]	; (800215c <HAL_DMA_IRQHandler+0x204>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d102      	bne.n	8001fea <HAL_DMA_IRQHandler+0x92>
 8001fe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fe8:	e00e      	b.n	8002008 <HAL_DMA_IRQHandler+0xb0>
 8001fea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fee:	e00b      	b.n	8002008 <HAL_DMA_IRQHandler+0xb0>
 8001ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ff4:	e008      	b.n	8002008 <HAL_DMA_IRQHandler+0xb0>
 8001ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ffa:	e005      	b.n	8002008 <HAL_DMA_IRQHandler+0xb0>
 8001ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002000:	e002      	b.n	8002008 <HAL_DMA_IRQHandler+0xb0>
 8002002:	2340      	movs	r3, #64	; 0x40
 8002004:	e000      	b.n	8002008 <HAL_DMA_IRQHandler+0xb0>
 8002006:	2304      	movs	r3, #4
 8002008:	4a55      	ldr	r2, [pc, #340]	; (8002160 <HAL_DMA_IRQHandler+0x208>)
 800200a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8094 	beq.w	800213e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800201e:	e08e      	b.n	800213e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	2202      	movs	r2, #2
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d056      	beq.n	80020de <HAL_DMA_IRQHandler+0x186>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d051      	beq.n	80020de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 020a 	bic.w	r2, r2, #10
 8002056:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a38      	ldr	r2, [pc, #224]	; (8002148 <HAL_DMA_IRQHandler+0x1f0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d029      	beq.n	80020be <HAL_DMA_IRQHandler+0x166>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a37      	ldr	r2, [pc, #220]	; (800214c <HAL_DMA_IRQHandler+0x1f4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d022      	beq.n	80020ba <HAL_DMA_IRQHandler+0x162>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a35      	ldr	r2, [pc, #212]	; (8002150 <HAL_DMA_IRQHandler+0x1f8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01a      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x15c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a34      	ldr	r2, [pc, #208]	; (8002154 <HAL_DMA_IRQHandler+0x1fc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d012      	beq.n	80020ae <HAL_DMA_IRQHandler+0x156>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_DMA_IRQHandler+0x200>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00a      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x150>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a31      	ldr	r2, [pc, #196]	; (800215c <HAL_DMA_IRQHandler+0x204>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d102      	bne.n	80020a2 <HAL_DMA_IRQHandler+0x14a>
 800209c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020a0:	e00e      	b.n	80020c0 <HAL_DMA_IRQHandler+0x168>
 80020a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a6:	e00b      	b.n	80020c0 <HAL_DMA_IRQHandler+0x168>
 80020a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ac:	e008      	b.n	80020c0 <HAL_DMA_IRQHandler+0x168>
 80020ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b2:	e005      	b.n	80020c0 <HAL_DMA_IRQHandler+0x168>
 80020b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b8:	e002      	b.n	80020c0 <HAL_DMA_IRQHandler+0x168>
 80020ba:	2320      	movs	r3, #32
 80020bc:	e000      	b.n	80020c0 <HAL_DMA_IRQHandler+0x168>
 80020be:	2302      	movs	r3, #2
 80020c0:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_DMA_IRQHandler+0x208>)
 80020c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d034      	beq.n	800213e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020dc:	e02f      	b.n	800213e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	2208      	movs	r2, #8
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d028      	beq.n	8002140 <HAL_DMA_IRQHandler+0x1e8>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d023      	beq.n	8002140 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 020e 	bic.w	r2, r2, #14
 8002106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
    }
  }
  return;
 800213e:	bf00      	nop
 8002140:	bf00      	nop
}
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40020008 	.word	0x40020008
 800214c:	4002001c 	.word	0x4002001c
 8002150:	40020030 	.word	0x40020030
 8002154:	40020044 	.word	0x40020044
 8002158:	40020058 	.word	0x40020058
 800215c:	4002006c 	.word	0x4002006c
 8002160:	40020000 	.word	0x40020000

08002164 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b10      	cmp	r3, #16
 8002190:	d108      	bne.n	80021a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021a2:	e007      	b.n	80021b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b08b      	sub	sp, #44	; 0x2c
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d2:	e169      	b.n	80024a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021d4:	2201      	movs	r2, #1
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 8158 	bne.w	80024a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4a9a      	ldr	r2, [pc, #616]	; (8002460 <HAL_GPIO_Init+0x2a0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d05e      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 80021fc:	4a98      	ldr	r2, [pc, #608]	; (8002460 <HAL_GPIO_Init+0x2a0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d875      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 8002202:	4a98      	ldr	r2, [pc, #608]	; (8002464 <HAL_GPIO_Init+0x2a4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d058      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 8002208:	4a96      	ldr	r2, [pc, #600]	; (8002464 <HAL_GPIO_Init+0x2a4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d86f      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 800220e:	4a96      	ldr	r2, [pc, #600]	; (8002468 <HAL_GPIO_Init+0x2a8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d052      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 8002214:	4a94      	ldr	r2, [pc, #592]	; (8002468 <HAL_GPIO_Init+0x2a8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d869      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 800221a:	4a94      	ldr	r2, [pc, #592]	; (800246c <HAL_GPIO_Init+0x2ac>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d04c      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 8002220:	4a92      	ldr	r2, [pc, #584]	; (800246c <HAL_GPIO_Init+0x2ac>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d863      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 8002226:	4a92      	ldr	r2, [pc, #584]	; (8002470 <HAL_GPIO_Init+0x2b0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d046      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 800222c:	4a90      	ldr	r2, [pc, #576]	; (8002470 <HAL_GPIO_Init+0x2b0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d85d      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 8002232:	2b12      	cmp	r3, #18
 8002234:	d82a      	bhi.n	800228c <HAL_GPIO_Init+0xcc>
 8002236:	2b12      	cmp	r3, #18
 8002238:	d859      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 800223a:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_GPIO_Init+0x80>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	080022bb 	.word	0x080022bb
 8002244:	08002295 	.word	0x08002295
 8002248:	080022a7 	.word	0x080022a7
 800224c:	080022e9 	.word	0x080022e9
 8002250:	080022ef 	.word	0x080022ef
 8002254:	080022ef 	.word	0x080022ef
 8002258:	080022ef 	.word	0x080022ef
 800225c:	080022ef 	.word	0x080022ef
 8002260:	080022ef 	.word	0x080022ef
 8002264:	080022ef 	.word	0x080022ef
 8002268:	080022ef 	.word	0x080022ef
 800226c:	080022ef 	.word	0x080022ef
 8002270:	080022ef 	.word	0x080022ef
 8002274:	080022ef 	.word	0x080022ef
 8002278:	080022ef 	.word	0x080022ef
 800227c:	080022ef 	.word	0x080022ef
 8002280:	080022ef 	.word	0x080022ef
 8002284:	0800229d 	.word	0x0800229d
 8002288:	080022b1 	.word	0x080022b1
 800228c:	4a79      	ldr	r2, [pc, #484]	; (8002474 <HAL_GPIO_Init+0x2b4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002292:	e02c      	b.n	80022ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e029      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	3304      	adds	r3, #4
 80022a2:	623b      	str	r3, [r7, #32]
          break;
 80022a4:	e024      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	3308      	adds	r3, #8
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e01f      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	330c      	adds	r3, #12
 80022b6:	623b      	str	r3, [r7, #32]
          break;
 80022b8:	e01a      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022c2:	2304      	movs	r3, #4
 80022c4:	623b      	str	r3, [r7, #32]
          break;
 80022c6:	e013      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d0:	2308      	movs	r3, #8
 80022d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	611a      	str	r2, [r3, #16]
          break;
 80022da:	e009      	b.n	80022f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022dc:	2308      	movs	r3, #8
 80022de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	615a      	str	r2, [r3, #20]
          break;
 80022e6:	e003      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
          break;
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          break;
 80022ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2bff      	cmp	r3, #255	; 0xff
 80022f4:	d801      	bhi.n	80022fa <HAL_GPIO_Init+0x13a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	e001      	b.n	80022fe <HAL_GPIO_Init+0x13e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2bff      	cmp	r3, #255	; 0xff
 8002304:	d802      	bhi.n	800230c <HAL_GPIO_Init+0x14c>
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	e002      	b.n	8002312 <HAL_GPIO_Init+0x152>
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	3b08      	subs	r3, #8
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	210f      	movs	r1, #15
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	401a      	ands	r2, r3
 8002324:	6a39      	ldr	r1, [r7, #32]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	431a      	orrs	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80b1 	beq.w	80024a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002340:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <HAL_GPIO_Init+0x2b8>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <HAL_GPIO_Init+0x2b8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_GPIO_Init+0x2b8>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002358:	4a48      	ldr	r2, [pc, #288]	; (800247c <HAL_GPIO_Init+0x2bc>)
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a40      	ldr	r2, [pc, #256]	; (8002480 <HAL_GPIO_Init+0x2c0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d013      	beq.n	80023ac <HAL_GPIO_Init+0x1ec>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3f      	ldr	r2, [pc, #252]	; (8002484 <HAL_GPIO_Init+0x2c4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00d      	beq.n	80023a8 <HAL_GPIO_Init+0x1e8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3e      	ldr	r2, [pc, #248]	; (8002488 <HAL_GPIO_Init+0x2c8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d007      	beq.n	80023a4 <HAL_GPIO_Init+0x1e4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a3d      	ldr	r2, [pc, #244]	; (800248c <HAL_GPIO_Init+0x2cc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_GPIO_Init+0x1e0>
 800239c:	2303      	movs	r3, #3
 800239e:	e006      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023a0:	2304      	movs	r3, #4
 80023a2:	e004      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e002      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023ac:	2300      	movs	r3, #0
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023be:	492f      	ldr	r1, [pc, #188]	; (800247c <HAL_GPIO_Init+0x2bc>)
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	492c      	ldr	r1, [pc, #176]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e6:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4928      	ldr	r1, [pc, #160]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4922      	ldr	r1, [pc, #136]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	43db      	mvns	r3, r3
 8002416:	491e      	ldr	r1, [pc, #120]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002418:	4013      	ands	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4918      	ldr	r1, [pc, #96]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	43db      	mvns	r3, r3
 800243e:	4914      	ldr	r1, [pc, #80]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002440:	4013      	ands	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d021      	beq.n	8002494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_GPIO_Init+0x2d0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e021      	b.n	80024a2 <HAL_GPIO_Init+0x2e2>
 800245e:	bf00      	nop
 8002460:	10320000 	.word	0x10320000
 8002464:	10310000 	.word	0x10310000
 8002468:	10220000 	.word	0x10220000
 800246c:	10210000 	.word	0x10210000
 8002470:	10120000 	.word	0x10120000
 8002474:	10110000 	.word	0x10110000
 8002478:	40021000 	.word	0x40021000
 800247c:	40010000 	.word	0x40010000
 8002480:	40010800 	.word	0x40010800
 8002484:	40010c00 	.word	0x40010c00
 8002488:	40011000 	.word	0x40011000
 800248c:	40011400 	.word	0x40011400
 8002490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_GPIO_Init+0x304>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	43db      	mvns	r3, r3
 800249c:	4909      	ldr	r1, [pc, #36]	; (80024c4 <HAL_GPIO_Init+0x304>)
 800249e:	4013      	ands	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	3301      	adds	r3, #1
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f47f ae8e 	bne.w	80021d4 <HAL_GPIO_Init+0x14>
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	372c      	adds	r7, #44	; 0x2c
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e001      	b.n	80024ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	807b      	strh	r3, [r7, #2]
 8002502:	4613      	mov	r3, r2
 8002504:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002506:	787b      	ldrb	r3, [r7, #1]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250c:	887a      	ldrh	r2, [r7, #2]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002512:	e003      	b.n	800251c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	041a      	lsls	r2, r3, #16
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	611a      	str	r2, [r3, #16]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002538:	887a      	ldrh	r2, [r7, #2]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4013      	ands	r3, r2
 800253e:	041a      	lsls	r2, r3, #16
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43d9      	mvns	r1, r3
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	400b      	ands	r3, r1
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	611a      	str	r2, [r3, #16]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e272      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8087 	beq.w	8002686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002578:	4b92      	ldr	r3, [pc, #584]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b04      	cmp	r3, #4
 8002582:	d00c      	beq.n	800259e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002584:	4b8f      	ldr	r3, [pc, #572]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d112      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5e>
 8002590:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	d10b      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259e:	4b89      	ldr	r3, [pc, #548]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d06c      	beq.n	8002684 <HAL_RCC_OscConfig+0x12c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d168      	bne.n	8002684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e24c      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x76>
 80025c0:	4b80      	ldr	r3, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7f      	ldr	r2, [pc, #508]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e02e      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x98>
 80025d6:	4b7b      	ldr	r3, [pc, #492]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7a      	ldr	r2, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b78      	ldr	r3, [pc, #480]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e01d      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0xbc>
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a71      	ldr	r2, [pc, #452]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6e      	ldr	r2, [pc, #440]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 8002614:	4b6b      	ldr	r3, [pc, #428]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a6a      	ldr	r2, [pc, #424]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b68      	ldr	r3, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a67      	ldr	r2, [pc, #412]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe fe20 	bl	8001278 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7fe fe1c 	bl	8001278 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e200      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0xe4>
 800265a:	e014      	b.n	8002686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe fe0c 	bl	8001278 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fe08 	bl	8001278 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1ec      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x10c>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d063      	beq.n	800275a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002692:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d11c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x18c>
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d116      	bne.n	80026e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_RCC_OscConfig+0x176>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e1c0      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4939      	ldr	r1, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	e03a      	b.n	800275a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fdc1 	bl	8001278 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe fdbd 	bl	8001278 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e1a1      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4927      	ldr	r1, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]
 800272c:	e015      	b.n	800275a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fda0 	bl	8001278 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273c:	f7fe fd9c 	bl	8001278 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e180      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d03a      	beq.n	80027dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d019      	beq.n	80027a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7fe fd80 	bl	8001278 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277c:	f7fe fd7c 	bl	8001278 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e160      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800279a:	2001      	movs	r0, #1
 800279c:	f000 faba 	bl	8002d14 <RCC_Delay>
 80027a0:	e01c      	b.n	80027dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7fe fd66 	bl	8001278 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ae:	e00f      	b.n	80027d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7fe fd62 	bl	8001278 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d908      	bls.n	80027d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e146      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	42420000 	.word	0x42420000
 80027cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e9      	bne.n	80027b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a6 	beq.w	8002936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a87      	ldr	r2, [pc, #540]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	61d3      	str	r3, [r2, #28]
 8002806:	4b85      	ldr	r3, [pc, #532]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b82      	ldr	r3, [pc, #520]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002822:	4b7f      	ldr	r3, [pc, #508]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7e      	ldr	r2, [pc, #504]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282e:	f7fe fd23 	bl	8001278 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002836:	f7fe fd1f 	bl	8001278 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e103      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b75      	ldr	r3, [pc, #468]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x312>
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6213      	str	r3, [r2, #32]
 8002868:	e02d      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x334>
 8002872:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a69      	ldr	r2, [pc, #420]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a66      	ldr	r2, [pc, #408]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	6213      	str	r3, [r2, #32]
 800288a:	e01c      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b05      	cmp	r3, #5
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0x356>
 8002894:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a60      	ldr	r2, [pc, #384]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a5d      	ldr	r2, [pc, #372]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	e00b      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a5a      	ldr	r2, [pc, #360]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6213      	str	r3, [r2, #32]
 80028ba:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d015      	beq.n	80028fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe fcd3 	bl	8001278 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe fccf 	bl	8001278 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e0b1      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ee      	beq.n	80028d6 <HAL_RCC_OscConfig+0x37e>
 80028f8:	e014      	b.n	8002924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7fe fcbd 	bl	8001278 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe fcb9 	bl	8001278 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e09b      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ee      	bne.n	8002902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8087 	beq.w	8002a4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d061      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d146      	bne.n	80029e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <HAL_RCC_OscConfig+0x4cc>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fc8d 	bl	8001278 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fc89 	bl	8001278 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e06d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002974:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d108      	bne.n	800299c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4921      	ldr	r1, [pc, #132]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a19      	ldr	r1, [r3, #32]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	430b      	orrs	r3, r1
 80029ae:	491b      	ldr	r1, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x4cc>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fc5d 	bl	8001278 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fc59 	bl	8001278 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e03d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x46a>
 80029e0:	e035      	b.n	8002a4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x4cc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fc46 	bl	8001278 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fc42 	bl	8001278 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e026      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x498>
 8002a0e:	e01e      	b.n	8002a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e019      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40007000 	.word	0x40007000
 8002a24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_OscConfig+0x500>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0d0      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d910      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 0207 	bic.w	r2, r3, #7
 8002a86:	4965      	ldr	r1, [pc, #404]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0b8      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab8:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad0:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b50      	ldr	r3, [pc, #320]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	494d      	ldr	r1, [pc, #308]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d040      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d115      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e07f      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e073      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06b      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4936      	ldr	r1, [pc, #216]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fb94 	bl	8001278 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe fb90 	bl	8001278 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e053      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 020c 	and.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1eb      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d210      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 0207 	bic.w	r2, r3, #7
 8002b92:	4922      	ldr	r1, [pc, #136]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e032      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4916      	ldr	r1, [pc, #88]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	490e      	ldr	r1, [pc, #56]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bea:	f000 f821 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	490a      	ldr	r1, [pc, #40]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	5ccb      	ldrb	r3, [r1, r3]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1cc>)
 8002c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1d0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe faf2 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40021000 	.word	0x40021000
 8002c24:	08004ce8 	.word	0x08004ce8
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	20000004 	.word	0x20000004

08002c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x30>
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x36>
 8002c5e:	e027      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c62:	613b      	str	r3, [r7, #16]
      break;
 8002c64:	e027      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	0c9b      	lsrs	r3, r3, #18
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d010      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0c5b      	lsrs	r3, r3, #17
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c92:	fb03 f202 	mul.w	r2, r3, r2
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	e004      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ca4:	fb02 f303 	mul.w	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	613b      	str	r3, [r7, #16]
      break;
 8002cae:	e002      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb2:	613b      	str	r3, [r7, #16]
      break;
 8002cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb6:	693b      	ldr	r3, [r7, #16]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	007a1200 	.word	0x007a1200
 8002ccc:	08004d00 	.word	0x08004d00
 8002cd0:	08004d10 	.word	0x08004d10
 8002cd4:	003d0900 	.word	0x003d0900

08002cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000000 	.word	0x20000000

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf0:	f7ff fff2 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4903      	ldr	r1, [pc, #12]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08004cf8 	.word	0x08004cf8

08002d14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <RCC_Delay+0x34>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <RCC_Delay+0x38>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a5b      	lsrs	r3, r3, #9
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d30:	bf00      	nop
  }
  while (Delay --);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	60fa      	str	r2, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f9      	bne.n	8002d30 <RCC_Delay+0x1c>
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	10624dd3 	.word	0x10624dd3

08002d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d07d      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d70:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	61d3      	str	r3, [r2, #28]
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d118      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db0:	f7fe fa62 	bl	8001278 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	e008      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7fe fa5e 	bl	8001278 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e06d      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d027      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df4:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dfe:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e04:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d014      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fa2d 	bl	8001278 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fa29 	bl	8001278 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e036      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ee      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4917      	ldr	r1, [pc, #92]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	490b      	ldr	r1, [pc, #44]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	42420440 	.word	0x42420440

08002ebc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	f200 808a 	bhi.w	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d045      	beq.n	8002f78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d075      	beq.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002ef2:	e082      	b.n	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002ef4:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002efa:	4b45      	ldr	r3, [pc, #276]	; (8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d07b      	beq.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	0c9b      	lsrs	r3, r3, #18
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	4a41      	ldr	r2, [pc, #260]	; (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d015      	beq.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f1e:	4b3c      	ldr	r3, [pc, #240]	; (8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	0c5b      	lsrs	r3, r3, #17
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	4a3b      	ldr	r2, [pc, #236]	; (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002f2a:	5cd3      	ldrb	r3, [r2, r3]
 8002f2c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f38:	4a38      	ldr	r2, [pc, #224]	; (800301c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	e004      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4a34      	ldr	r2, [pc, #208]	; (8003020 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f54:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f60:	d102      	bne.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	61bb      	str	r3, [r7, #24]
      break;
 8002f66:	e04a      	b.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4a2d      	ldr	r2, [pc, #180]	; (8003024 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	61bb      	str	r3, [r7, #24]
      break;
 8002f76:	e042      	b.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d108      	bne.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	e01f      	b.n	8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa6:	d109      	bne.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002fb4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e00f      	b.n	8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc6:	d11c      	bne.n	8003002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d016      	beq.n	8003002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002fd4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002fd8:	61bb      	str	r3, [r7, #24]
      break;
 8002fda:	e012      	b.n	8003002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002fdc:	e011      	b.n	8003002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002fde:	f7ff fe85 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	0b9b      	lsrs	r3, r3, #14
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	61bb      	str	r3, [r7, #24]
      break;
 8002ff8:	e004      	b.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003002:	bf00      	nop
    }
  }
  return (frequency);
 8003004:	69bb      	ldr	r3, [r7, #24]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	08004d14 	.word	0x08004d14
 8003018:	08004d24 	.word	0x08004d24
 800301c:	007a1200 	.word	0x007a1200
 8003020:	003d0900 	.word	0x003d0900
 8003024:	aaaaaaab 	.word	0xaaaaaaab

08003028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e041      	b.n	80030be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe f80a 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f000 fab2 	bl	80035d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e041      	b.n	800315c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f839 	bl	8003164 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 fa63 	bl	80035d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
	...

08003178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start+0x24>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e022      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d109      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x3e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e015      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d109      	bne.n	80031d0 <HAL_TIM_PWM_Start+0x58>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e008      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e05e      	b.n	80032a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Start+0x82>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f8:	e013      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d104      	bne.n	800320a <HAL_TIM_PWM_Start+0x92>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003208:	e00b      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d104      	bne.n	800321a <HAL_TIM_PWM_Start+0xa2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003218:	e003      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fc50 	bl	8003ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <HAL_TIM_PWM_Start+0x138>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d107      	bne.n	800324a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_TIM_PWM_Start+0x138>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_TIM_PWM_Start+0xfa>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d009      	beq.n	8003272 <HAL_TIM_PWM_Start+0xfa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <HAL_TIM_PWM_Start+0x13c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_TIM_PWM_Start+0xfa>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <HAL_TIM_PWM_Start+0x140>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b06      	cmp	r3, #6
 8003282:	d010      	beq.n	80032a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	e007      	b.n	80032a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800

080032bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e0ae      	b.n	8003438 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b0c      	cmp	r3, #12
 80032e6:	f200 809f 	bhi.w	8003428 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003325 	.word	0x08003325
 80032f4:	08003429 	.word	0x08003429
 80032f8:	08003429 	.word	0x08003429
 80032fc:	08003429 	.word	0x08003429
 8003300:	08003365 	.word	0x08003365
 8003304:	08003429 	.word	0x08003429
 8003308:	08003429 	.word	0x08003429
 800330c:	08003429 	.word	0x08003429
 8003310:	080033a7 	.word	0x080033a7
 8003314:	08003429 	.word	0x08003429
 8003318:	08003429 	.word	0x08003429
 800331c:	08003429 	.word	0x08003429
 8003320:	080033e7 	.word	0x080033e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f9b2 	bl	8003694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6999      	ldr	r1, [r3, #24]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	619a      	str	r2, [r3, #24]
      break;
 8003362:	e064      	b.n	800342e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f9f8 	bl	8003760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6999      	ldr	r1, [r3, #24]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	619a      	str	r2, [r3, #24]
      break;
 80033a4:	e043      	b.n	800342e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fa41 	bl	8003834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0208 	orr.w	r2, r2, #8
 80033c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0204 	bic.w	r2, r2, #4
 80033d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69d9      	ldr	r1, [r3, #28]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	61da      	str	r2, [r3, #28]
      break;
 80033e4:	e023      	b.n	800342e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fa8b 	bl	8003908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69d9      	ldr	r1, [r3, #28]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	021a      	lsls	r2, r3, #8
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	61da      	str	r2, [r3, #28]
      break;
 8003426:	e002      	b.n	800342e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	75fb      	strb	r3, [r7, #23]
      break;
 800342c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003436:	7dfb      	ldrb	r3, [r7, #23]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_TIM_ConfigClockSource+0x1c>
 8003458:	2302      	movs	r3, #2
 800345a:	e0b4      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x186>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800347a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003494:	d03e      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0xd4>
 8003496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349a:	f200 8087 	bhi.w	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a2:	f000 8086 	beq.w	80035b2 <HAL_TIM_ConfigClockSource+0x172>
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	d87f      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b70      	cmp	r3, #112	; 0x70
 80034ae:	d01a      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0xa6>
 80034b0:	2b70      	cmp	r3, #112	; 0x70
 80034b2:	d87b      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b60      	cmp	r3, #96	; 0x60
 80034b6:	d050      	beq.n	800355a <HAL_TIM_ConfigClockSource+0x11a>
 80034b8:	2b60      	cmp	r3, #96	; 0x60
 80034ba:	d877      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034bc:	2b50      	cmp	r3, #80	; 0x50
 80034be:	d03c      	beq.n	800353a <HAL_TIM_ConfigClockSource+0xfa>
 80034c0:	2b50      	cmp	r3, #80	; 0x50
 80034c2:	d873      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d058      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x13a>
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d86f      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034cc:	2b30      	cmp	r3, #48	; 0x30
 80034ce:	d064      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x15a>
 80034d0:	2b30      	cmp	r3, #48	; 0x30
 80034d2:	d86b      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d060      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x15a>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d867      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d05c      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x15a>
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d05a      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x15a>
 80034e4:	e062      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f000 facc 	bl	8003a92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	609a      	str	r2, [r3, #8]
      break;
 8003512:	e04f      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f000 fab5 	bl	8003a92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003536:	609a      	str	r2, [r3, #8]
      break;
 8003538:	e03c      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6859      	ldr	r1, [r3, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	461a      	mov	r2, r3
 8003548:	f000 fa2c 	bl	80039a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2150      	movs	r1, #80	; 0x50
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fa83 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 8003558:	e02c      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	461a      	mov	r2, r3
 8003568:	f000 fa4a 	bl	8003a00 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2160      	movs	r1, #96	; 0x60
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fa73 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 8003578:	e01c      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	f000 fa0c 	bl	80039a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2140      	movs	r1, #64	; 0x40
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fa63 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 8003598:	e00c      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f000 fa5a 	bl	8003a5e <TIM_ITRx_SetConfig>
      break;
 80035aa:	e003      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      break;
 80035b0:	e000      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a29      	ldr	r2, [pc, #164]	; (8003688 <TIM_Base_SetConfig+0xb8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00b      	beq.n	8003600 <TIM_Base_SetConfig+0x30>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ee:	d007      	beq.n	8003600 <TIM_Base_SetConfig+0x30>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a26      	ldr	r2, [pc, #152]	; (800368c <TIM_Base_SetConfig+0xbc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_Base_SetConfig+0x30>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a25      	ldr	r2, [pc, #148]	; (8003690 <TIM_Base_SetConfig+0xc0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <TIM_Base_SetConfig+0xb8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00b      	beq.n	8003632 <TIM_Base_SetConfig+0x62>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d007      	beq.n	8003632 <TIM_Base_SetConfig+0x62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a19      	ldr	r2, [pc, #100]	; (800368c <TIM_Base_SetConfig+0xbc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_Base_SetConfig+0x62>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a18      	ldr	r2, [pc, #96]	; (8003690 <TIM_Base_SetConfig+0xc0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a07      	ldr	r2, [pc, #28]	; (8003688 <TIM_Base_SetConfig+0xb8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d103      	bne.n	8003678 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	615a      	str	r2, [r3, #20]
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800

08003694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f023 0201 	bic.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 0302 	bic.w	r3, r3, #2
 80036dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a1c      	ldr	r2, [pc, #112]	; (800375c <TIM_OC1_SetConfig+0xc8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10c      	bne.n	800370a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0308 	bic.w	r3, r3, #8
 80036f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <TIM_OC1_SetConfig+0xc8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d111      	bne.n	8003736 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	621a      	str	r2, [r3, #32]
}
 8003750:	bf00      	nop
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40012c00 	.word	0x40012c00

08003760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f023 0210 	bic.w	r2, r3, #16
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 0320 	bic.w	r3, r3, #32
 80037aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <TIM_OC2_SetConfig+0xd0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10d      	bne.n	80037dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a14      	ldr	r2, [pc, #80]	; (8003830 <TIM_OC2_SetConfig+0xd0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d113      	bne.n	800380c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	621a      	str	r2, [r3, #32]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	40012c00 	.word	0x40012c00

08003834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800387c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <TIM_OC3_SetConfig+0xd0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d10d      	bne.n	80038ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <TIM_OC3_SetConfig+0xd0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d113      	bne.n	80038de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40012c00 	.word	0x40012c00

08003908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	031b      	lsls	r3, r3, #12
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0f      	ldr	r2, [pc, #60]	; (80039a0 <TIM_OC4_SetConfig+0x98>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d109      	bne.n	800397c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800396e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00

080039a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0201 	bic.w	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 030a 	bic.w	r3, r3, #10
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 0210 	bic.w	r2, r3, #16
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	031b      	lsls	r3, r3, #12
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f043 0307 	orr.w	r3, r3, #7
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	609a      	str	r2, [r3, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b087      	sub	sp, #28
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	021a      	lsls	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	609a      	str	r2, [r3, #8]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	401a      	ands	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e046      	b.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a16      	ldr	r2, [pc, #88]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00e      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d009      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10c      	bne.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800

08003bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e03d      	b.n	8003c6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
	...

08003c78 <__libc_init_array>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	4d0c      	ldr	r5, [pc, #48]	; (8003cb0 <__libc_init_array+0x38>)
 8003c7e:	4c0d      	ldr	r4, [pc, #52]	; (8003cb4 <__libc_init_array+0x3c>)
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	42a6      	cmp	r6, r4
 8003c86:	d109      	bne.n	8003c9c <__libc_init_array+0x24>
 8003c88:	f000 f822 	bl	8003cd0 <_init>
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	4d0a      	ldr	r5, [pc, #40]	; (8003cb8 <__libc_init_array+0x40>)
 8003c90:	4c0a      	ldr	r4, [pc, #40]	; (8003cbc <__libc_init_array+0x44>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	42a6      	cmp	r6, r4
 8003c98:	d105      	bne.n	8003ca6 <__libc_init_array+0x2e>
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca0:	4798      	blx	r3
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7ee      	b.n	8003c84 <__libc_init_array+0xc>
 8003ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003caa:	4798      	blx	r3
 8003cac:	3601      	adds	r6, #1
 8003cae:	e7f2      	b.n	8003c96 <__libc_init_array+0x1e>
 8003cb0:	08004d28 	.word	0x08004d28
 8003cb4:	08004d28 	.word	0x08004d28
 8003cb8:	08004d28 	.word	0x08004d28
 8003cbc:	08004d2c 	.word	0x08004d2c

08003cc0 <memset>:
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4402      	add	r2, r0
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d100      	bne.n	8003cca <memset+0xa>
 8003cc8:	4770      	bx	lr
 8003cca:	f803 1b01 	strb.w	r1, [r3], #1
 8003cce:	e7f9      	b.n	8003cc4 <memset+0x4>

08003cd0 <_init>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr

08003cdc <_fini>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	bf00      	nop
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr
