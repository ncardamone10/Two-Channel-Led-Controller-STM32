/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.h
  * @brief          : Header for main.c file.
  *                   This file contains the common defines of the application.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_H
#define __MAIN_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32f1xx_hal.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Exported types ------------------------------------------------------------*/
/* USER CODE BEGIN ET */

/* USER CODE END ET */

/* Exported constants --------------------------------------------------------*/
/* USER CODE BEGIN EC */

// LUT to make the pot feel more "linear". The led has an exp i/v curve so y is a ln(x) function to make the
//		pot value roughly proportional to the LED intensity/ current
static const float y[512] = {
    0.000000, 0.007582, 0.015035, 0.022361, 0.029566, 0.036654, 0.043628, 0.050491,
    0.057248, 0.063901, 0.070454, 0.076909, 0.083270, 0.089539, 0.095719, 0.101812,
    0.107820, 0.113747, 0.119594, 0.125363, 0.131057, 0.136677, 0.142225, 0.147704,
    0.153114, 0.158457, 0.163735, 0.168950, 0.174104, 0.179196, 0.184230, 0.189206,
    0.194126, 0.198990, 0.203801, 0.208559, 0.213266, 0.217922, 0.222528, 0.227086,
    0.231597, 0.236062, 0.240481, 0.244855, 0.249186, 0.253475, 0.257721, 0.261926,
    0.266091, 0.270216, 0.274302, 0.278351, 0.282362, 0.286336, 0.290274, 0.294177,
    0.298045, 0.301879, 0.305679, 0.309447, 0.313182, 0.316885, 0.320557, 0.324198,
    0.327809, 0.331390, 0.334941, 0.338464, 0.341959, 0.345426, 0.348865, 0.352277,
    0.355663, 0.359022, 0.362356, 0.365664, 0.368947, 0.372206, 0.375440, 0.378650,
    0.381837, 0.385001, 0.388142, 0.391260, 0.394356, 0.397430, 0.400482, 0.403513,
    0.406524, 0.409513, 0.412482, 0.415431, 0.418360, 0.421269, 0.424159, 0.427030,
    0.429882, 0.432715, 0.435530, 0.438327, 0.441106, 0.443867, 0.446611, 0.449338,
    0.452048, 0.454740, 0.457417, 0.460077, 0.462720, 0.465348, 0.467960, 0.470556,
    0.473137, 0.475702, 0.478253, 0.480789, 0.483309, 0.485816, 0.488308, 0.490786,
    0.493249, 0.495699, 0.498135, 0.500558, 0.502967, 0.505362, 0.507745, 0.510115,
    0.512471, 0.514815, 0.517147, 0.519466, 0.521772, 0.524067, 0.526349, 0.528620,
    0.530879, 0.533126, 0.535361, 0.537585, 0.539798, 0.541999, 0.544189, 0.546369,
    0.548537, 0.550695, 0.552842, 0.554978, 0.557104, 0.559220, 0.561325, 0.563421,
    0.565506, 0.567581, 0.569646, 0.571702, 0.573748, 0.575784, 0.577811, 0.579828,
    0.581836, 0.583835, 0.585825, 0.587805, 0.589777, 0.591740, 0.593693, 0.595639,
    0.597575, 0.599503, 0.601422, 0.603333, 0.605235, 0.607130, 0.609016, 0.610893,
    0.612763, 0.614625, 0.616479, 0.618324, 0.620163, 0.621993, 0.623816, 0.625631,
    0.627438, 0.629238, 0.631031, 0.632816, 0.634594, 0.636364, 0.638128, 0.639884,
    0.641633, 0.643375, 0.645111, 0.646839, 0.648561, 0.650275, 0.651983, 0.653684,
    0.655379, 0.657067, 0.658749, 0.660424, 0.662092, 0.663754, 0.665410, 0.667060,
    0.668703, 0.670340, 0.671971, 0.673596, 0.675215, 0.676828, 0.678435, 0.680036,
    0.681631, 0.683220, 0.684803, 0.686381, 0.687953, 0.689519, 0.691080, 0.692635,
    0.694184, 0.695728, 0.697267, 0.698800, 0.700328, 0.701850, 0.703367, 0.704879,
    0.706385, 0.707887, 0.709383, 0.710874, 0.712360, 0.713841, 0.715316, 0.716787,
    0.718253, 0.719714, 0.721170, 0.722621, 0.724067, 0.725509, 0.726946, 0.728378,
    0.729805, 0.731228, 0.732646, 0.734059, 0.735468, 0.736872, 0.738272, 0.739667,
    0.741057, 0.742444, 0.743826, 0.745203, 0.746576, 0.747945, 0.749310, 0.750670,
    0.752026, 0.753378, 0.754725, 0.756069, 0.757408, 0.758743, 0.760074, 0.761401,
    0.762724, 0.764043, 0.765358, 0.766669, 0.767976, 0.769279, 0.770578, 0.771874,
    0.773165, 0.774453, 0.775737, 0.777017, 0.778293, 0.779565, 0.780834, 0.782099,
    0.783361, 0.784619, 0.785873, 0.787123, 0.788370, 0.789614, 0.790854, 0.792090,
    0.793323, 0.794552, 0.795778, 0.797000, 0.798219, 0.799435, 0.800647, 0.801856,
    0.803061, 0.804263, 0.805462, 0.806658, 0.807850, 0.809039, 0.810225, 0.811407,
    0.812586, 0.813762, 0.814935, 0.816105, 0.817272, 0.818435, 0.819595, 0.820753,
    0.821907, 0.823058, 0.824206, 0.825351, 0.826493, 0.827632, 0.828768, 0.829901,
    0.831032, 0.832159, 0.833283, 0.834405, 0.835523, 0.836639, 0.837751, 0.838861,
    0.839969, 0.841073, 0.842174, 0.843273, 0.844369, 0.845462, 0.846553, 0.847640,
    0.848725, 0.849808, 0.850887, 0.851964, 0.853038, 0.854110, 0.855179, 0.856245,
    0.857309, 0.858370, 0.859429, 0.860485, 0.861538, 0.862589, 0.863637, 0.864683,
    0.865726, 0.866767, 0.867805, 0.868841, 0.869874, 0.870905, 0.871934, 0.872960,
    0.873983, 0.875005, 0.876023, 0.877040, 0.878054, 0.879066, 0.880075, 0.881082,
    0.882087, 0.883089, 0.884089, 0.885087, 0.886082, 0.887075, 0.888066, 0.889055,
    0.890041, 0.891025, 0.892007, 0.892987, 0.893965, 0.894940, 0.895913, 0.896884,
    0.897853, 0.898820, 0.899784, 0.900746, 0.901707, 0.902665, 0.903621, 0.904575,
    0.905527, 0.906476, 0.907424, 0.908370, 0.909313, 0.910255, 0.911194, 0.912132,
    0.913067, 0.914000, 0.914932, 0.915861, 0.916789, 0.917714, 0.918638, 0.919559,
    0.920479, 0.921396, 0.922312, 0.923226, 0.924138, 0.925048, 0.925956, 0.926862,
    0.927766, 0.928668, 0.929569, 0.930468, 0.931364, 0.932259, 0.933152, 0.934044,
    0.934933, 0.935821, 0.936706, 0.937591, 0.938473, 0.939353, 0.940232, 0.941109,
    0.941984, 0.942857, 0.943729, 0.944599, 0.945467, 0.946333, 0.947198, 0.948061,
    0.948922, 0.949781, 0.950639, 0.951495, 0.952350, 0.953203, 0.954054, 0.954903,
    0.955751, 0.956597, 0.957441, 0.958284, 0.959125, 0.959965, 0.960803, 0.961639,
    0.962474, 0.963307, 0.964139, 0.964969, 0.965797, 0.966624, 0.967449, 0.968273,
    0.969095, 0.969915, 0.970734, 0.971552, 0.972368, 0.973182, 0.973995, 0.974806,
    0.975616, 0.976424, 0.977231, 0.978037, 0.978840, 0.979643, 0.980444, 0.981243,
    0.982041, 0.982837, 0.983632, 0.984426, 0.985218, 0.986009, 0.986798, 0.987586,
    0.988372, 0.989157, 0.989941, 0.990723, 0.991504, 0.992283, 0.993061, 0.993837,
    0.994612, 0.995386, 0.996159, 0.996930, 0.997699, 0.998467, 0.999234, 1.000000,
};

// LUT to maintain a good brightness roll off at low brightnesses
static const float spreadRollOff[512] = {
    0.013333, 0.026667, 0.040000, 0.053333, 0.066667, 0.080000, 0.093333, 0.106667,
    0.120000, 0.133333, 0.146667, 0.160000, 0.173333, 0.186667, 0.200000, 0.213333,
    0.226667, 0.240000, 0.253333, 0.266667, 0.280000, 0.293333, 0.306667, 0.320000,
    0.333333, 0.346667, 0.360000, 0.373333, 0.386667, 0.400000, 0.413333, 0.426667,
    0.440000, 0.453333, 0.466667, 0.480000, 0.493333, 0.506667, 0.520000, 0.533333,
    0.546667, 0.560000, 0.573333, 0.586667, 0.600000, 0.613333, 0.626667, 0.640000,
    0.653333, 0.666667, 0.680000, 0.693333, 0.706667, 0.720000, 0.733333, 0.746667,
    0.760000, 0.773333, 0.786667, 0.800000, 0.813333, 0.826667, 0.840000, 0.853333,
    0.866667, 0.880000, 0.893333, 0.906667, 0.920000, 0.933333, 0.946667, 0.960000,
    0.973333, 0.986667, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
};

/* ----- MATLAB code to generate these LUTS
	% MATLAB code to create a lookup table for ln(x)
	% Define the x range and preallocate the lookup table
	x = linspace(1, 10, 512);
	y = log(x);
	y = y/max(y);
	plot(x,y)

	t = 1:512;
	spreadRollOff = t/75;
	spreadRollOff(spreadRollOff > 1) = 1;
	plot(t, spreadRollOff)

	% Print out LUT for log function
	disp('const float y[512] = {')
	for i = 1:8:length(y)
		fprintf('    ')
		fprintf('%.6f, ', y(i:min(i+7, end)))
		fprintf('\n')
	end
	disp('};')

	% Print out LUT for roll off factor
	disp('const float spreadRollOff[512] = {')
	for i = 1:8:length(y)
		fprintf('    ')
		fprintf('%.6f, ', spreadRollOff(i:min(i+7, end)))
		fprintf('\n')
	end
	disp('};')
 */
/* USER CODE END EC */

/* Exported macro ------------------------------------------------------------*/
/* USER CODE BEGIN EM */

/* USER CODE END EM */

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

/* Exported functions prototypes ---------------------------------------------*/
void Error_Handler(void);

/* USER CODE BEGIN EFP */

/* USER CODE END EFP */

/* Private defines -----------------------------------------------------------*/
#define CLOCK_PERIOD 1200

/* USER CODE BEGIN Private defines */

/* USER CODE END Private defines */

#ifdef __cplusplus
}
#endif

#endif /* __MAIN_H */
